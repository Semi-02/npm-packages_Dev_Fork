// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ResponseWifiConnect {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResponseWifiConnect {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResponseWifiConnect(bb:flatbuffers.ByteBuffer, obj?:ResponseWifiConnect):ResponseWifiConnect {
  return (obj || new ResponseWifiConnect()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResponseWifiConnect(bb:flatbuffers.ByteBuffer, obj?:ResponseWifiConnect):ResponseWifiConnect {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResponseWifiConnect()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

success():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

ssid():string|null
ssid(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ssid(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

ip():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

netmask():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

gateway():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;
}

rssi():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

static startResponseWifiConnect(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addSuccess(builder:flatbuffers.Builder, success:boolean) {
  builder.addFieldInt8(0, +success, +false);
}

static addSsid(builder:flatbuffers.Builder, ssidOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, ssidOffset, 0);
}

static addIp(builder:flatbuffers.Builder, ip:number) {
  builder.addFieldInt32(2, ip, 0);
}

static addNetmask(builder:flatbuffers.Builder, netmask:number) {
  builder.addFieldInt32(3, netmask, 0);
}

static addGateway(builder:flatbuffers.Builder, gateway:number) {
  builder.addFieldInt32(4, gateway, 0);
}

static addRssi(builder:flatbuffers.Builder, rssi:number) {
  builder.addFieldInt8(5, rssi, 0);
}

static endResponseWifiConnect(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResponseWifiConnect(builder:flatbuffers.Builder, success:boolean, ssidOffset:flatbuffers.Offset, ip:number, netmask:number, gateway:number, rssi:number):flatbuffers.Offset {
  ResponseWifiConnect.startResponseWifiConnect(builder);
  ResponseWifiConnect.addSuccess(builder, success);
  ResponseWifiConnect.addSsid(builder, ssidOffset);
  ResponseWifiConnect.addIp(builder, ip);
  ResponseWifiConnect.addNetmask(builder, netmask);
  ResponseWifiConnect.addGateway(builder, gateway);
  ResponseWifiConnect.addRssi(builder, rssi);
  return ResponseWifiConnect.endResponseWifiConnect(builder);
}
}
