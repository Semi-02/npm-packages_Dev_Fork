// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { ResponseNetworkInformation } from '../wifimanager/response-network-information';
import { ResponseWifiConnect } from '../wifimanager/response-wifi-connect';
import { ResponseWifiDisconnect } from '../wifimanager/response-wifi-disconnect';


export enum Responses {
  NONE = 0,
  ResponseNetworkInformation = 1,
  ResponseWifiConnect = 2,
  ResponseWifiDisconnect = 3
}

export function unionToResponses(
  type: Responses,
  accessor: (obj:ResponseNetworkInformation|ResponseWifiConnect|ResponseWifiDisconnect) => ResponseNetworkInformation|ResponseWifiConnect|ResponseWifiDisconnect|null
): ResponseNetworkInformation|ResponseWifiConnect|ResponseWifiDisconnect|null {
  switch(Responses[type]) {
    case 'NONE': return null; 
    case 'ResponseNetworkInformation': return accessor(new ResponseNetworkInformation())! as ResponseNetworkInformation;
    case 'ResponseWifiConnect': return accessor(new ResponseWifiConnect())! as ResponseWifiConnect;
    case 'ResponseWifiDisconnect': return accessor(new ResponseWifiDisconnect())! as ResponseWifiDisconnect;
    default: return null;
  }
}

export function unionListToResponses(
  type: Responses, 
  accessor: (index: number, obj:ResponseNetworkInformation|ResponseWifiConnect|ResponseWifiDisconnect) => ResponseNetworkInformation|ResponseWifiConnect|ResponseWifiDisconnect|null, 
  index: number
): ResponseNetworkInformation|ResponseWifiConnect|ResponseWifiDisconnect|null {
  switch(Responses[type]) {
    case 'NONE': return null; 
    case 'ResponseNetworkInformation': return accessor(index, new ResponseNetworkInformation())! as ResponseNetworkInformation;
    case 'ResponseWifiConnect': return accessor(index, new ResponseWifiConnect())! as ResponseWifiConnect;
    case 'ResponseWifiDisconnect': return accessor(index, new ResponseWifiDisconnect())! as ResponseWifiDisconnect;
    default: return null;
  }
}
