// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Finger {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Finger {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFinger(bb:flatbuffers.ByteBuffer, obj?:Finger):Finger {
  return (obj || new Finger()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFinger(bb:flatbuffers.ByteBuffer, obj?:Finger):Finger {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Finger()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

index():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

scheduleName():string|null
scheduleName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scheduleName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

actionIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startFinger(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addIndex(builder:flatbuffers.Builder, index:number) {
  builder.addFieldInt16(1, index, 0);
}

static addScheduleName(builder:flatbuffers.Builder, scheduleNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, scheduleNameOffset, 0);
}

static addActionIndex(builder:flatbuffers.Builder, actionIndex:number) {
  builder.addFieldInt16(3, actionIndex, 0);
}

static endFinger(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFinger(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, index:number, scheduleNameOffset:flatbuffers.Offset, actionIndex:number):flatbuffers.Offset {
  Finger.startFinger(builder);
  Finger.addName(builder, nameOffset);
  Finger.addIndex(builder, index);
  Finger.addScheduleName(builder, scheduleNameOffset);
  Finger.addActionIndex(builder, actionIndex);
  return Finger.endFinger(builder);
}
}
