// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class RequestStoreFingerSchedule {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RequestStoreFingerSchedule {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRequestStoreFingerSchedule(bb:flatbuffers.ByteBuffer, obj?:RequestStoreFingerSchedule):RequestStoreFingerSchedule {
  return (obj || new RequestStoreFingerSchedule()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRequestStoreFingerSchedule(bb:flatbuffers.ByteBuffer, obj?:RequestStoreFingerSchedule):RequestStoreFingerSchedule {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RequestStoreFingerSchedule()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

fingerIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

scheduleName():string|null
scheduleName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
scheduleName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startRequestStoreFingerSchedule(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addFingerIndex(builder:flatbuffers.Builder, fingerIndex:number) {
  builder.addFieldInt16(0, fingerIndex, 0);
}

static addScheduleName(builder:flatbuffers.Builder, scheduleNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, scheduleNameOffset, 0);
}

static endRequestStoreFingerSchedule(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRequestStoreFingerSchedule(builder:flatbuffers.Builder, fingerIndex:number, scheduleNameOffset:flatbuffers.Offset):flatbuffers.Offset {
  RequestStoreFingerSchedule.startRequestStoreFingerSchedule(builder);
  RequestStoreFingerSchedule.addFingerIndex(builder, fingerIndex);
  RequestStoreFingerSchedule.addScheduleName(builder, scheduleNameOffset);
  return RequestStoreFingerSchedule.endRequestStoreFingerSchedule(builder);
}
}
