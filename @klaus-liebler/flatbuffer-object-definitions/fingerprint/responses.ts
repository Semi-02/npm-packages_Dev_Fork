// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import { NotifyEnrollNewFinger } from '../fingerprint/notify-enroll-new-finger';
import { NotifyFingerDetected } from '../fingerprint/notify-finger-detected';
import { ResponseCancelInstruction } from '../fingerprint/response-cancel-instruction';
import { ResponseDeleteAllFingers } from '../fingerprint/response-delete-all-fingers';
import { ResponseDeleteFinger } from '../fingerprint/response-delete-finger';
import { ResponseEnrollNewFinger } from '../fingerprint/response-enroll-new-finger';
import { ResponseFingerActionManually } from '../fingerprint/response-finger-action-manually';
import { ResponseFingerprintSensorInfo } from '../fingerprint/response-fingerprint-sensor-info';
import { ResponseFingers } from '../fingerprint/response-fingers';
import { ResponseRenameFinger } from '../fingerprint/response-rename-finger';
import { ResponseStoreFingerAction } from '../fingerprint/response-store-finger-action';
import { ResponseStoreFingerSchedule } from '../fingerprint/response-store-finger-schedule';


export enum Responses {
  NONE = 0,
  ResponseFingerActionManually = 1,
  ResponseEnrollNewFinger = 2,
  NotifyEnrollNewFinger = 3,
  NotifyFingerDetected = 4,
  ResponseDeleteFinger = 5,
  ResponseStoreFingerAction = 6,
  ResponseStoreFingerSchedule = 7,
  ResponseDeleteAllFingers = 8,
  ResponseCancelInstruction = 9,
  ResponseRenameFinger = 10,
  ResponseFingerprintSensorInfo = 11,
  ResponseFingers = 12
}

export function unionToResponses(
  type: Responses,
  accessor: (obj:NotifyEnrollNewFinger|NotifyFingerDetected|ResponseCancelInstruction|ResponseDeleteAllFingers|ResponseDeleteFinger|ResponseEnrollNewFinger|ResponseFingerActionManually|ResponseFingerprintSensorInfo|ResponseFingers|ResponseRenameFinger|ResponseStoreFingerAction|ResponseStoreFingerSchedule) => NotifyEnrollNewFinger|NotifyFingerDetected|ResponseCancelInstruction|ResponseDeleteAllFingers|ResponseDeleteFinger|ResponseEnrollNewFinger|ResponseFingerActionManually|ResponseFingerprintSensorInfo|ResponseFingers|ResponseRenameFinger|ResponseStoreFingerAction|ResponseStoreFingerSchedule|null
): NotifyEnrollNewFinger|NotifyFingerDetected|ResponseCancelInstruction|ResponseDeleteAllFingers|ResponseDeleteFinger|ResponseEnrollNewFinger|ResponseFingerActionManually|ResponseFingerprintSensorInfo|ResponseFingers|ResponseRenameFinger|ResponseStoreFingerAction|ResponseStoreFingerSchedule|null {
  switch(Responses[type]) {
    case 'NONE': return null; 
    case 'ResponseFingerActionManually': return accessor(new ResponseFingerActionManually())! as ResponseFingerActionManually;
    case 'ResponseEnrollNewFinger': return accessor(new ResponseEnrollNewFinger())! as ResponseEnrollNewFinger;
    case 'NotifyEnrollNewFinger': return accessor(new NotifyEnrollNewFinger())! as NotifyEnrollNewFinger;
    case 'NotifyFingerDetected': return accessor(new NotifyFingerDetected())! as NotifyFingerDetected;
    case 'ResponseDeleteFinger': return accessor(new ResponseDeleteFinger())! as ResponseDeleteFinger;
    case 'ResponseStoreFingerAction': return accessor(new ResponseStoreFingerAction())! as ResponseStoreFingerAction;
    case 'ResponseStoreFingerSchedule': return accessor(new ResponseStoreFingerSchedule())! as ResponseStoreFingerSchedule;
    case 'ResponseDeleteAllFingers': return accessor(new ResponseDeleteAllFingers())! as ResponseDeleteAllFingers;
    case 'ResponseCancelInstruction': return accessor(new ResponseCancelInstruction())! as ResponseCancelInstruction;
    case 'ResponseRenameFinger': return accessor(new ResponseRenameFinger())! as ResponseRenameFinger;
    case 'ResponseFingerprintSensorInfo': return accessor(new ResponseFingerprintSensorInfo())! as ResponseFingerprintSensorInfo;
    case 'ResponseFingers': return accessor(new ResponseFingers())! as ResponseFingers;
    default: return null;
  }
}

export function unionListToResponses(
  type: Responses, 
  accessor: (index: number, obj:NotifyEnrollNewFinger|NotifyFingerDetected|ResponseCancelInstruction|ResponseDeleteAllFingers|ResponseDeleteFinger|ResponseEnrollNewFinger|ResponseFingerActionManually|ResponseFingerprintSensorInfo|ResponseFingers|ResponseRenameFinger|ResponseStoreFingerAction|ResponseStoreFingerSchedule) => NotifyEnrollNewFinger|NotifyFingerDetected|ResponseCancelInstruction|ResponseDeleteAllFingers|ResponseDeleteFinger|ResponseEnrollNewFinger|ResponseFingerActionManually|ResponseFingerprintSensorInfo|ResponseFingers|ResponseRenameFinger|ResponseStoreFingerAction|ResponseStoreFingerSchedule|null, 
  index: number
): NotifyEnrollNewFinger|NotifyFingerDetected|ResponseCancelInstruction|ResponseDeleteAllFingers|ResponseDeleteFinger|ResponseEnrollNewFinger|ResponseFingerActionManually|ResponseFingerprintSensorInfo|ResponseFingers|ResponseRenameFinger|ResponseStoreFingerAction|ResponseStoreFingerSchedule|null {
  switch(Responses[type]) {
    case 'NONE': return null; 
    case 'ResponseFingerActionManually': return accessor(index, new ResponseFingerActionManually())! as ResponseFingerActionManually;
    case 'ResponseEnrollNewFinger': return accessor(index, new ResponseEnrollNewFinger())! as ResponseEnrollNewFinger;
    case 'NotifyEnrollNewFinger': return accessor(index, new NotifyEnrollNewFinger())! as NotifyEnrollNewFinger;
    case 'NotifyFingerDetected': return accessor(index, new NotifyFingerDetected())! as NotifyFingerDetected;
    case 'ResponseDeleteFinger': return accessor(index, new ResponseDeleteFinger())! as ResponseDeleteFinger;
    case 'ResponseStoreFingerAction': return accessor(index, new ResponseStoreFingerAction())! as ResponseStoreFingerAction;
    case 'ResponseStoreFingerSchedule': return accessor(index, new ResponseStoreFingerSchedule())! as ResponseStoreFingerSchedule;
    case 'ResponseDeleteAllFingers': return accessor(index, new ResponseDeleteAllFingers())! as ResponseDeleteAllFingers;
    case 'ResponseCancelInstruction': return accessor(index, new ResponseCancelInstruction())! as ResponseCancelInstruction;
    case 'ResponseRenameFinger': return accessor(index, new ResponseRenameFinger())! as ResponseRenameFinger;
    case 'ResponseFingerprintSensorInfo': return accessor(index, new ResponseFingerprintSensorInfo())! as ResponseFingerprintSensorInfo;
    case 'ResponseFingers': return accessor(index, new ResponseFingers())! as ResponseFingers;
    default: return null;
  }
}
