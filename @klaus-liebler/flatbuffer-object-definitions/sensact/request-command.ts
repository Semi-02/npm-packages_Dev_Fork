// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ApplicationId } from '../application-id';
import { Command } from '../command';


export class RequestCommand {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RequestCommand {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRequestCommand(bb:flatbuffers.ByteBuffer, obj?:RequestCommand):RequestCommand {
  return (obj || new RequestCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRequestCommand(bb:flatbuffers.ByteBuffer, obj?:RequestCommand):RequestCommand {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RequestCommand()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():ApplicationId {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : ApplicationId.MASTER;
}

cmd():Command {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : Command.NOP;
}

payload():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : BigInt('0');
}

static startRequestCommand(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addId(builder:flatbuffers.Builder, id:ApplicationId) {
  builder.addFieldInt16(0, id, ApplicationId.MASTER);
}

static addCmd(builder:flatbuffers.Builder, cmd:Command) {
  builder.addFieldInt8(1, cmd, Command.NOP);
}

static addPayload(builder:flatbuffers.Builder, payload:bigint) {
  builder.addFieldInt64(2, payload, BigInt('0'));
}

static endRequestCommand(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRequestCommand(builder:flatbuffers.Builder, id:ApplicationId, cmd:Command, payload:bigint):flatbuffers.Offset {
  RequestCommand.startRequestCommand(builder);
  RequestCommand.addId(builder, id);
  RequestCommand.addCmd(builder, cmd);
  RequestCommand.addPayload(builder, payload);
  return RequestCommand.endRequestCommand(builder);
}
}
