// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Mode } from '../heaterexperiment/mode';


export class RequestHeater {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RequestHeater {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRequestHeater(bb:flatbuffers.ByteBuffer, obj?:RequestHeater):RequestHeater {
  return (obj || new RequestHeater()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRequestHeater(bb:flatbuffers.ByteBuffer, obj?:RequestHeater):RequestHeater {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RequestHeater()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

mode():Mode {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : Mode.FunctionBlock;
}

heaterPowerPercent():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

setpointTemperatureDegrees():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

fanSpeedPercent():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

kp():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

tn():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

tv():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

heaterPowerWorkingPointPercent():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

regulatorReset():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

static startRequestHeater(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addMode(builder:flatbuffers.Builder, mode:Mode) {
  builder.addFieldInt8(0, mode, Mode.FunctionBlock);
}

static addHeaterPowerPercent(builder:flatbuffers.Builder, heaterPowerPercent:number) {
  builder.addFieldFloat32(1, heaterPowerPercent, 0.0);
}

static addSetpointTemperatureDegrees(builder:flatbuffers.Builder, setpointTemperatureDegrees:number) {
  builder.addFieldFloat32(2, setpointTemperatureDegrees, 0.0);
}

static addFanSpeedPercent(builder:flatbuffers.Builder, fanSpeedPercent:number) {
  builder.addFieldFloat32(3, fanSpeedPercent, 0.0);
}

static addKp(builder:flatbuffers.Builder, kp:number) {
  builder.addFieldFloat32(4, kp, 0.0);
}

static addTn(builder:flatbuffers.Builder, tn:number) {
  builder.addFieldFloat32(5, tn, 0.0);
}

static addTv(builder:flatbuffers.Builder, tv:number) {
  builder.addFieldFloat32(6, tv, 0.0);
}

static addHeaterPowerWorkingPointPercent(builder:flatbuffers.Builder, heaterPowerWorkingPointPercent:number) {
  builder.addFieldFloat32(7, heaterPowerWorkingPointPercent, 0.0);
}

static addRegulatorReset(builder:flatbuffers.Builder, regulatorReset:boolean) {
  builder.addFieldInt8(8, +regulatorReset, +false);
}

static endRequestHeater(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRequestHeater(builder:flatbuffers.Builder, mode:Mode, heaterPowerPercent:number, setpointTemperatureDegrees:number, fanSpeedPercent:number, kp:number, tn:number, tv:number, heaterPowerWorkingPointPercent:number, regulatorReset:boolean):flatbuffers.Offset {
  RequestHeater.startRequestHeater(builder);
  RequestHeater.addMode(builder, mode);
  RequestHeater.addHeaterPowerPercent(builder, heaterPowerPercent);
  RequestHeater.addSetpointTemperatureDegrees(builder, setpointTemperatureDegrees);
  RequestHeater.addFanSpeedPercent(builder, fanSpeedPercent);
  RequestHeater.addKp(builder, kp);
  RequestHeater.addTn(builder, tn);
  RequestHeater.addTv(builder, tv);
  RequestHeater.addHeaterPowerWorkingPointPercent(builder, heaterPowerWorkingPointPercent);
  RequestHeater.addRegulatorReset(builder, regulatorReset);
  return RequestHeater.endRequestHeater(builder);
}
}
