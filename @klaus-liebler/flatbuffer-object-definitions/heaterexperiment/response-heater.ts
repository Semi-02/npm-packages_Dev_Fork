// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ResponseHeater {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ResponseHeater {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsResponseHeater(bb:flatbuffers.ByteBuffer, obj?:ResponseHeater):ResponseHeater {
  return (obj || new ResponseHeater()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsResponseHeater(bb:flatbuffers.ByteBuffer, obj?:ResponseHeater):ResponseHeater {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ResponseHeater()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

setpointTemperatureDegrees():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

actualTemperatureDegrees():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

heaterPowerPercent():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

fanSpeedPercent():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startResponseHeater(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addSetpointTemperatureDegrees(builder:flatbuffers.Builder, setpointTemperatureDegrees:number) {
  builder.addFieldFloat32(0, setpointTemperatureDegrees, 0.0);
}

static addActualTemperatureDegrees(builder:flatbuffers.Builder, actualTemperatureDegrees:number) {
  builder.addFieldFloat32(1, actualTemperatureDegrees, 0.0);
}

static addHeaterPowerPercent(builder:flatbuffers.Builder, heaterPowerPercent:number) {
  builder.addFieldFloat32(2, heaterPowerPercent, 0.0);
}

static addFanSpeedPercent(builder:flatbuffers.Builder, fanSpeedPercent:number) {
  builder.addFieldFloat32(3, fanSpeedPercent, 0.0);
}

static endResponseHeater(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createResponseHeater(builder:flatbuffers.Builder, setpointTemperatureDegrees:number, actualTemperatureDegrees:number, heaterPowerPercent:number, fanSpeedPercent:number):flatbuffers.Offset {
  ResponseHeater.startResponseHeater(builder);
  ResponseHeater.addSetpointTemperatureDegrees(builder, setpointTemperatureDegrees);
  ResponseHeater.addActualTemperatureDegrees(builder, actualTemperatureDegrees);
  ResponseHeater.addHeaterPowerPercent(builder, heaterPowerPercent);
  ResponseHeater.addFanSpeedPercent(builder, fanSpeedPercent);
  return ResponseHeater.endResponseHeater(builder);
}
}
