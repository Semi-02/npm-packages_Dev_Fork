// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Schedule } from '../scheduler/schedule';


export class RequestSchedulerSave {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RequestSchedulerSave {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRequestSchedulerSave(bb:flatbuffers.ByteBuffer, obj?:RequestSchedulerSave):RequestSchedulerSave {
  return (obj || new RequestSchedulerSave()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRequestSchedulerSave(bb:flatbuffers.ByteBuffer, obj?:RequestSchedulerSave):RequestSchedulerSave {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RequestSchedulerSave()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

payload(obj?:Schedule):Schedule|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Schedule()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startRequestSchedulerSave(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addPayload(builder:flatbuffers.Builder, payloadOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, payloadOffset, 0);
}

static endRequestSchedulerSave(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRequestSchedulerSave(builder:flatbuffers.Builder, payloadOffset:flatbuffers.Offset):flatbuffers.Offset {
  RequestSchedulerSave.startRequestSchedulerSave(builder);
  RequestSchedulerSave.addPayload(builder, payloadOffset);
  return RequestSchedulerSave.endRequestSchedulerSave(builder);
}
}
