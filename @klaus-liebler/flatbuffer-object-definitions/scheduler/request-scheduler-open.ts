// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { eSchedule } from '../scheduler/e-schedule';


export class RequestSchedulerOpen {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RequestSchedulerOpen {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRequestSchedulerOpen(bb:flatbuffers.ByteBuffer, obj?:RequestSchedulerOpen):RequestSchedulerOpen {
  return (obj || new RequestSchedulerOpen()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRequestSchedulerOpen(bb:flatbuffers.ByteBuffer, obj?:RequestSchedulerOpen):RequestSchedulerOpen {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RequestSchedulerOpen()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():eSchedule {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : eSchedule.Predefined;
}

static startRequestSchedulerOpen(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:eSchedule) {
  builder.addFieldInt8(1, type, eSchedule.Predefined);
}

static endRequestSchedulerOpen(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRequestSchedulerOpen(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset, type:eSchedule):flatbuffers.Offset {
  RequestSchedulerOpen.startRequestSchedulerOpen(builder);
  RequestSchedulerOpen.addName(builder, nameOffset);
  RequestSchedulerOpen.addType(builder, type);
  return RequestSchedulerOpen.endRequestSchedulerOpen(builder);
}
}
