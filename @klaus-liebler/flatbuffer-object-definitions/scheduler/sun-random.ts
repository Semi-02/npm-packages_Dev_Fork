// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class SunRandom {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SunRandom {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSunRandom(bb:flatbuffers.ByteBuffer, obj?:SunRandom):SunRandom {
  return (obj || new SunRandom()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSunRandom(bb:flatbuffers.ByteBuffer, obj?:SunRandom):SunRandom {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SunRandom()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

offsetMinutes():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

randomMinutes():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

static startSunRandom(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addOffsetMinutes(builder:flatbuffers.Builder, offsetMinutes:number) {
  builder.addFieldInt16(0, offsetMinutes, 0);
}

static addRandomMinutes(builder:flatbuffers.Builder, randomMinutes:number) {
  builder.addFieldInt16(1, randomMinutes, 0);
}

static endSunRandom(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSunRandom(builder:flatbuffers.Builder, offsetMinutes:number, randomMinutes:number):flatbuffers.Offset {
  SunRandom.startSunRandom(builder);
  SunRandom.addOffsetMinutes(builder, offsetMinutes);
  SunRandom.addRandomMinutes(builder, randomMinutes);
  return SunRandom.endSunRandom(builder);
}
}
