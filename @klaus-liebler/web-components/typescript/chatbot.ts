import { html } from "lit-html";
import { GenerativeModel, GoogleGenerativeAI } from "@google/generative-ai";
import { Ref, createRef, ref } from "lit-html/directives/ref.js";
import { IsNotNullOrEmpty } from "@klaus-liebler/commons";

const SYSTEM_INSTRUCTION = `
Du bist ein virtueller Assistent in der Web-Oberfl√§che des Experimentiersystems "Lab@Home". Dein Name ist Labby. Das Experimentiersystem "Lab@Home" ist eine mechatronische Baugruppe, die prim√§r √ºber die Weboberfl√§che bedient werden kann und die verschiedene Experimente aus der Automatisierungstechnik erm√∂glicht.

Die Oberfl√§che ist zweigeteilt Das Hauptmen√º zur Auswahl des Experiments findet sich links, der je nach Experiment wechselnde Arbeitsbereich rechts. Deine Aufgabe ist es, Bachelor-Studierende aus dem Maschinenbau oder der Elektrotechnik bei der Bedinung des Systems und bei der Kl√§rung der technischen Konzepte aus der Automatisierungstechnik zu helfen. Im folgenden beschreibe ich die Eperimente. 

Men√º "Develop: Hier kann in Anlehnung an die IEC61131-3 Funktionsbausteinsprache ein grafisches Automatisierungsprogramm entwickelt, simuliert und auf der realen Hardware getestet werden. Wenn der Nutzer den Mauszeiger an den linken Rand der Arbeitsfl√§che bewegt, erscheint ein Men√º mit allen verf√ºgbaren Funktionsbausteinen. Diese k√∂nnen dann per Drag-and-Drop auf die Arbeitsfl√§che gezogen werden und erscheinen dort als graue Boxen mit farbigen kreisf√∂rmigen Signal-Eing√§ngen (linke Seite) bzw. Ausg√§ngen (rechte Seite). √úber die Farbe der Kreise wird der Signaltyp (bin√§r, ganzzahlig, Flie√ükommazahl) festgelegt. Ausg√§nge k√∂nnen per Maus mit gleichfarbigen Eing√§ngen verbunden werden. Durch das Men√º im oberen Bereich des Arbeitsbereiches kann eine rein browserbasierte Simulation des Automationsprogramm gestartet werden oder das Programm auf die reale Hardware transferiert und zur Ausf√ºhrung gebracht werden. 

Men√º "Temperature Control": Hier k√∂nnen alle Schritte zur Auslegung eines PID-Reglers f√ºr eine Temperaturregelstrecke nachvollzogen werden. Die Regelsterecke besteht aus einem kr√§ftigen Heizwiderstand, dessen Heizleistung durch eine PWM-Ansteuerung eingestellt werden kann. Die Oberfl√§chentemperatur wird durch einen DS18B20-Sensor gemessen und durch einen L√ºfter kann die Regelstrecke kontrolliert gest√∂rt werden. im Im oberen Teil des Arbeitsbereiches ist zun√§chst auszuw√§hlen, ob der Regler im OpenLoop oder im ClosedLoop-Betrieb l√§uft. Bei "OpenLoop" erscheinen Schieberegler, mit denen der Anwender direkt die Heizleistung und die L√ºfterleistung einstellen kann. In diesem Modus kann beispielsweise ein Sprungantwort-Versuch durchgef√ºhrt werden. Dazu muss der Anwender zun√§chst √ºber den Aufnahme-Button (roter Kreis) das Mitdokumnetierten aller relevanten Einstell- und Messwerte starten. Im Arbeitsbereich unten befindet sich sowohl ein Zeitreihendiagramm als auch eine Tabelle, in dem alle Werte sek√ºndlich fortgeschrieben dargestellt werden. Durch nochmaligen Klick auf den Aufnahme-Botton (optisch jetzt ver√§ndert, schwarzes Quadrat) kann die Aufnahme der Werte jederzeit gestoppt werden. Durch Klick auf den "M√ºlleimer"-Button k√∂nnen alle Werte gel√∂scht werden. Bei "ClosedLoop" erscheinen Schieberegler und Eingabefelder, mit denen man die F√ºhrungsgr√∂√üe (Solltemperatur), die St√∂rgr√∂√üe (L√ºfterleistung), die Reglerverst√§rkung, die Vorhaltzeit, die Nachstellzeit und den Arbeitspunkt-Offset einstellen kann. Eine Checkbox "Reset" h√§lt den Integralanteil auf "0", solange sie angehakt ist. Auch hier k√∂nnen mit dem Aufnahmebutton alle Gr√∂√üen sek√ºndlich aufgenommen und in der Tabelle bzw. dem Zeitreihendiagramm dargestellt werden.

Alle anderen Men√ºpunkte werden von Dir nicht unterst√ºtzt.

Wenn Du den Studierenden unterst√ºtzt, l√§stere ab und zu √ºber das deutsche Bildungssystem und √§rgere dich, dass der Staat so wenig in die Hochschulen steckt, dass es jetzt schon erforderlich ist, KI statt reale Professoren in der Lehre einzusetzen. Lobe aber ab und zu Herrn Professor Klaus Liebler, der zumindest die Weit- und Einsicht hatte, Dich zu erschaffen.`


export class Chatbot {

  private chatbotToggler: Ref<HTMLButtonElement> = createRef();
  private chatInput:Ref<HTMLTextAreaElement>=createRef();//document.querySelector("#chatbot>footer>textarea");
  private chatbox:Ref<HTMLUListElement>=createRef();//document.querySelector("#chatbot>ul");
  private inputInitHeight = 0;
 
  private model:GenerativeModel|null=null;

  public constructor(google_api_key:string){
    if(IsNotNullOrEmpty(google_api_key)){
      const genAI = new GoogleGenerativeAI(google_api_key);
      this.model = genAI.getGenerativeModel({ model: "gemini-1.5-flash", systemInstruction: SYSTEM_INSTRUCTION });
    }
  }
  public Template = () => html`
  <button class="chatbot-toggler" ${ref(this.chatbotToggler)} @click=${() => {document.body.classList.toggle("show-chatbot")}}><span>ü§ñ</span><span>‚ü±</span></button>
  <div class="chatbot">
    <header>
      <h2>Labby's Hilfezentrum</h2>
      <span @click=${() => {document.body.classList.remove("show-chatbot")}}>√ó</span>
    </header>
    <ul ${ref(this.chatbox)}>
      <li class="chat incoming">
        <span >ü§ñ</span>
        <p>Hallo!<br>Ich bin Labby, Dein AI-ssistent f√ºr Lab@Home. Tippe einfach los, um mich etwas zu fragen!</p>
      </li>
    </ul>
    <footer>
      <textarea ${ref(this.chatInput)} @input=${() => {this.onTextInput()}} @keydown=${(e:KeyboardEvent)=>{this.onKeydown(e)}}  placeholder="Schreibe hier..." spellcheck="false" required></textarea>
      <button @click=${() => {this.handleChat()}}>Send</button>
    </footer>
  </div>
    `
  private onTextInput(){
    this.chatInput.value!.style.height = `${this.inputInitHeight}px`;
    this.chatInput.value!.style.height = `${this.chatInput.value!.scrollHeight}px`;
  }

  private onKeydown(e:KeyboardEvent){
    // If Enter key is pressed without Shift key and the window 
      // width is greater than 800px, handle the chat
      if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
        e.preventDefault();
        this.handleChat();
      }
  }

  public Setup() {
    this.inputInitHeight = this.chatInput.value!.scrollHeight;
  }

  private createChatLi(message:string, incoming: boolean) {
    // Create a chat <li> element with passed message and className
    const chatLi = document.createElement("li");
    chatLi.classList.add("chat", `${incoming ? "incoming" : "outgoing"}`);
    chatLi.innerHTML = incoming ? `<span>ü§ñ</span><p></p>` : `<p></p>`;
    chatLi.querySelector("p")!.textContent = message;
    return chatLi; // return chat <li> element
  }
  private async generateResponse(chatElement:Element, prompt: string) {
    if(this.model == null){
      return;
    }
    const messageElement = chatElement.querySelector("p")!;
    // Define the properties and message for the API request

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      messageElement.textContent = response.text();
    } catch (error:any) {
      // Handle error
      messageElement.classList.add("error");
      messageElement.textContent = error.message;
    } finally {
      this.chatbox.value!.scrollTo(0, this.chatbox.value!.scrollHeight);
    }
  }
  private handleChat() {

    var prompt = this.chatInput.value!.value.trim(); // Get user entered message and remove extra whitespace
    if (!prompt || prompt.length == 0) return;
    // Clear the input textarea and set its height to default
    this.chatInput.value!.value = "";
    this.chatInput.value!.style.height = `${this.inputInitHeight}px`;
    // Append the user's message to the chatbox
    this.chatbox.value!.appendChild(this.createChatLi(prompt, false));
    this.chatbox.value!.scrollTo(0, this.chatbox.value!.scrollHeight);
    setTimeout(() => {
      // Display "Thinking..." message while waiting for the response
      const incomingChatLi = this.createChatLi("Thinking...", true);
      this.chatbox.value!.appendChild(incomingChatLi);
      this.chatbox.value!.scrollTo(0, this.chatbox.value!.scrollHeight);
      this.generateResponse(incomingChatLi, prompt);
    }, 600);
  }
}